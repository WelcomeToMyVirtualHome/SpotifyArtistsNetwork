from artist import Artist
import networkx as nx
from time import sleep
from collections import defaultdict
import json

class Data:
    def __init__(self, name, level, client):
        self.name = name
        self.level = level
        self.client = client
        self.adjacency = defaultdict(list)
        
    def artist_dict(self, api_dict):
        _dict = {"name" : api_dict["name"],
        "id" : api_dict["id"],
        "popularity" : api_dict["popularity"],
        "followers" : api_dict["followers"]["total"],
        "genres" : api_dict["genres"]}
        return _dict


    def download_data(self):
        self.add_related(self.name)
        [[self.add_related(name) for name in list(self.adjacency)] for i in range(self.level)]         
        
    def add_related(self, name):
        """
        Add to adjacency list artists related to artist with name given by name parameter.

        Function sleeps with each call for 0.1s to avoid flooding Spotify API.

        Function searches id of artist by sending a query to API. Then is queries for 
        related artists of artist with retreived id. Adds related artists to to list of said artist.
        Adds new artists to dict.

        :param name: name of artist
        :type name: string
        :return
        """
        sleep(0.1)
        result = self.client.search(q = name, types = 'artist', limit = 1)
        root = Artist(result["artists"]["items"][0])
        
        related = self.client.artist_related_artists(artist_id = root.id)
        new_artists = [Artist(r) for r in related["artists"]]
        
        # Remove duplicate vertex names from list
        self.adjacency[name] = list(set(self.adjacency[name] + [a for a in new_artists]))

        # Dictionary of vertexes for artists related to root
        new_dict = {a.name : [root] for a in new_artists}

        # Append new dict to existing one
        self.adjacency = {**self.adjacency, **new_dict}

    def save_data(self, filename):
        _json = json.dumps(self.adjacency)
        f = open(filename, "w")
        f.write(_json)
        f.close()